# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19fSrE60_heWZJ6z3t9C7jkIu42WfIGP3
"""

import pandas as pd
from datetime import datetime

df = pd.read_csv("/content/train.csv")

missing_values = df.isnull().sum()
print("Missing values in each column:\n", missing_values)

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    if df[column].isnull().sum() > 0:
        # Impute with mean if data is normally distributed; use median if skewed
        if df[column].skew() < 1:  # Adjust threshold as needed
            df[column].fillna(df[column].mean(), inplace=True)
            print(f"Imputed missing values in {column} with mean.")
        else:
            df[column].fillna(df[column].median(), inplace=True)
            print(f"Imputed missing values in {column} with median (due to skewness).")

# Impute missing values for categorical columns with mode
for column in df.select_dtypes(include=['object']).columns:
    if df[column].isnull().sum() > 0:
        df[column].fillna(df[column].mode()[0], inplace=True)
        print(f"Imputed missing values in {column} with mode (most frequent category).")

print("Final missing values check for each column:\n", df.isnull().sum())

print(df.columns)

"""B)"""

columns_to_clean = ['Mileage', 'Engine', 'Power', 'New_Price']

for column in columns_to_clean:
    if column in df.columns:
        df[column] = df[column].replace(r'[^0-9.]', '', regex=True).astype(float)
        print(f"Cleaned units from {column}")

# Check the result
print(df[columns_to_clean].head())

"""C)"""

# One-hot encode
df = pd.get_dummies(df, columns=['Fuel_Type', 'Transmission'], drop_first=True)

print(df.head())

"""D)Create one more feature and add this column to the dataset (you can use mutate function in R for this). For example, you can calculate the current age of the car by subtracting “Year” value from the current year.   """

# Get the current year
current_year = datetime.now().year

# Create a new column 'Car_Age' by subtracting the 'Year' from the current year
df['Car_Age'] = current_year - df['Year']

# Display the first few rows to check the result
print(df[['Year', 'Car_Age']].head())

"""E)Perform select, filter, rename, mutate, arrange and summarize with group by operations (or their equivalent operations in python) on this dataset. (4 points)  """

print("Available columns:", df.columns.tolist())

selected_columns = df[['Name', 'Year', 'Price', 'Car_Age']]

filtered_cars = selected_columns[selected_columns['Car_Age'] > 5]

renamed_cars = filtered_cars.rename(columns={'Name': 'Car_Name'})

renamed_cars['Price_in_Thousands'] = renamed_cars['Price'] * 1000

arranged_cars = renamed_cars.sort_values(by='Price', ascending=False)

average_price_by_year = arranged_cars.groupby('Year')['Price'].mean().reset_index()

# final outputs
print("Selected Columns:\n", selected_columns.head())
print("\nFiltered Cars (Older than 5 years):\n", filtered_cars.head())
print("\nRenamed Cars:\n", renamed_cars.head())
print("\nArranged Cars (by Price):\n", arranged_cars.head())
print("\nAverage Price by Year:\n", average_price_by_year)